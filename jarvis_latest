import openai
import os
import speech_recognition as sr
import subprocess
import requests
import logging
import re
import string
import threading
import queue
import time
import urllib.parse  # For URL encoding search queries
from dotenv import load_dotenv
from datetime import datetime

class VoiceAssistant:
    """
    A voice assistant that uses OpenAI ChatGPT, weather data, speech recognition,
    and text-to-speech (via macOS's 'say' command). Supports both voice and text input.
    """

    def __init__(self):
        # Load environment variables from .env file
        load_dotenv()

        # Setup logging (warnings and errors will show up)
        logging.basicConfig(
            level=logging.WARNING,
            format="%(asctime)s - %(levelname)s - %(message)s"
        )

        # Fetch API keys and home zip code from environment variables
        self.api_key = os.getenv("OPENAI_API_KEY")
        self.weather_api_key = os.getenv("WEATHER_API_KEY")
        self.home_zip_code = os.getenv("HOME_ZIP_CODE", "90263")  # Default if not set

        # Validate API keys
        if not self.api_key or not self.weather_api_key:
            logging.error(
                "API keys are missing. Please set OPENAI_API_KEY and WEATHER_API_KEY in the .env file."
            )
            raise ValueError("Missing API keys.")

        # Initialize the speech recognizer and calibrate the microphone
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()
        with self.microphone as source:
            self.recognizer.adjust_for_ambient_noise(source, duration=1)

        # Queues for commands and TTS messages
        self.command_queue = queue.Queue()
        self.tts_queue = queue.Queue()

        # Define available capabilities (manually update as you add functions)
        self.capabilities = {
            "ChatGPT Query": "Respond to general queries using ChatGPT-4.",
            "Weather": "Provide real-time weather conditions (try saying 'weather in [location]').",
            "Time": "Tell you the current time.",
            "Safari": "Open Safari to search the web or navigate to a specific website (e.g., 'bring up Google').",
            "Apps": "Open any installed application on your Mac by name (e.g., 'open mail', 'open calendar', 'open vs code').",
            "Future": "Take over the world..."
        }

    def print_header(self):
        """Clear the screen and print the persistent header."""
        os.system('cls' if os.name == 'nt' else 'clear')
        print("-" * 100)
        print(" " * 45 + "J.A.R.V.I.S.")
        print("-" * 100)

    def speak(self, text):
        """Queue text to be spoken by the TTS thread."""
        self.tts_queue.put(text)

    def tts_loop(self):
        """
        TTS thread loop that uses the macOS 'say' command.
        The '-r' flag speeds up the voice output (190 wpm here; adjust as needed).
        """
        while True:
            text = self.tts_queue.get()
            try:
                subprocess.call(["say", "-r", "190", text])
            except Exception as e:
                logging.error(f"TTS error: {e}")

    def listen_for_query(self):
        """
        Listen for a user's query (up to 3 attempts) and return the recognized text.
        Re-adjusts ambient noise before listening.
        """
        for attempt in range(3):
            try:
                logging.debug("Listening for query...")
                with sr.Microphone() as source:
                    # Re-calibrate the microphone to current ambient noise
                    self.recognizer.adjust_for_ambient_noise(source, duration=1)
                    audio = self.recognizer.listen(source, timeout=15, phrase_time_limit=15)
                query = self.recognizer.recognize_google(audio)
                logging.debug(f"Query recognized: {query}")
                return query
            except sr.UnknownValueError:
                self.speak("I didn't catch that. Please repeat your query.")
                logging.debug("Query not recognized.")
            except sr.RequestError as e:
                error_msg = f"Speech recognition service error: {e}"
                logging.error(error_msg)
                self.speak(error_msg)
                return None

        logging.error("Failed to understand query after multiple attempts.")
        self.speak("I couldn't understand your query. Please try again later.")
        return None

    def listen_for_command(self):
        """
        Listen for the wake word ("hey jarvis") and extract the subsequent command.
        If there's no immediate query after the wake word, prompt for further input.
        """
        logging.debug("Waiting for wake word 'hey jarvis'...")
        with self.microphone as source:
            while True:
                try:
                    audio = self.recognizer.listen(source, timeout=30, phrase_time_limit=10)
                except sr.WaitTimeoutError:
                    continue  # No speech detected; keep waiting.
                try:
                    command = self.recognizer.recognize_google(audio).lower()
                except sr.UnknownValueError:
                    logging.debug("No command recognized.")
                    continue
                except sr.RequestError as e:
                    logging.warning(f"Command recognition error: {e}")
                    continue

                logging.debug(f"Command recognized: {command}")
                if "hey jarvis" in command:
                    # Strip the wake word and any extra punctuation/spaces
                    query = command.split("hey jarvis", 1)[1].strip()
                    query = query.lstrip(string.punctuation + " ")
                    if query:
                        logging.debug(f"Immediate query: {query}")
                        return query
                    # No immediate query detected; prompt and wait a bit longer
                    self.speak("Yes, how can I help you?")
                    time.sleep(2)  # Increased delay to allow you to start speaking
                    return self.listen_for_query()

    def voice_input_thread(self):
        """Continuously listen for voice commands and add them to the command queue."""
        while True:
            query = self.listen_for_command()
            if query:
                self.command_queue.put(query)

    def text_input_thread(self):
        """Continuously prompt for text commands and add them to the command queue."""
        while True:
            query = input("Type your command: ").strip()
            if query:
                self.command_queue.put(query)

    def chat_with_gpt(self, prompt, model="gpt-4"):
        """Send a prompt to ChatGPT and return the response."""
        openai.api_key = self.api_key
        try:
            response = openai.ChatCompletion.create(
                model=model,
                messages=[
                    {"role": "system", "content": "You are a helpful AI assistant."},
                    {"role": "user", "content": prompt},
                ],
            )
            return response["choices"][0]["message"]["content"]
        except Exception as e:
            error_msg = f"Error: {e}"
            logging.error(error_msg)
            return error_msg

    def get_weather(self, location):
        """Fetch weather information for a given location."""
        if not location or location.lower() in ["home", "my location"]:
            location = self.home_zip_code

        if location.isdigit():
            url = (
                f"http://api.openweathermap.org/data/2.5/weather?"
                f"zip={location},us&appid={self.weather_api_key}&units=imperial"
            )
        else:
            url = (
                f"http://api.openweathermap.org/data/2.5/weather?"
                f"q={location}&appid={self.weather_api_key}&units=imperial"
            )

        try:
            response = requests.get(url)
            data = response.json()
            if response.status_code == 200:
                city = data.get("name", location)
                weather = data["weather"][0]["description"]
                temp = data["main"]["temp"]
                return f"The weather in {city} is {weather} with a temperature of {temp}Â°F."
            error_msg = f"Could not retrieve weather data for {location}."
            logging.error(error_msg)
            return error_msg
        except Exception as e:
            error_msg = f"Weather API error: {e}"
            logging.error(error_msg)
            return error_msg

    def parse_weather_query(self, query):
        """
        Extract a location from the query if it mentions 'weather in ...'.
        Returns the location or the default home zip code.
        """
        match = re.search(r'weather in ([\w\s]+)', query, re.IGNORECASE)
        if match:
            return match.group(1).strip()
        if "home" in query.lower() or "my location" in query.lower():
            return self.home_zip_code
        return None

    def list_capabilities(self):
        """Return a formatted string listing Jarvis's capabilities."""
        capabilities_info = "\n".join(f"- {name}: {desc}" for name, desc in self.capabilities.items())
        response = f"Here are my available functions:\n{capabilities_info}"
        return response

    def open_in_safari(self, query):
        """
        Open Safari on macOS with either a direct URL (if a known website is mentioned)
        or perform a Google search using the query.
        """
        # Mapping of known website keywords to their URLs
        sites = {
            "google": "https://www.google.com",
            "youtube": "https://www.youtube.com",
            "facebook": "https://www.facebook.com",
            "twitter": "https://www.twitter.com",
            "reddit": "https://www.reddit.com"
        }

        lower_query = query.lower()
        url = None

        # Check if the query contains any known site keywords.
        for site_name, site_url in sites.items():
            if site_name in lower_query:
                url = site_url
                break

        if not url:
            # If no specific site is mentioned, treat the entire query as a search query.
            # Remove phrases like "search for" or "open safari" if present.
            search_query = re.sub(r"^(search for|open safari|bring up|go to)\s+", "", lower_query)
            encoded_query = urllib.parse.quote(search_query)
            url = f"https://www.google.com/search?q={encoded_query}"

        try:
            subprocess.call(["open", "-a", "Safari", url])
            return f"Opening Safari with {site_name}"
        except Exception as e:
            logging.error(f"Error opening Safari: {e}")
            return "Sorry, I couldn't open Safari."

    def open_app(self, command):
        """
        Open any installed application on macOS based on the app name given in the command.
        For example, "open mail" or "open calendar" will open the corresponding app.
        """
        # Remove the "open " prefix and strip extra spaces.
        app_query = command[5:].strip()
        # Define common aliases to the official application names.
        app_aliases = {
            "mail": "Mail",
            "calendar": "Calendar",
            "vs code": "Visual Studio Code",
            "vscode": "Visual Studio Code",
            "code": "Visual Studio Code",
            "terminal": "Terminal",
            "notes": "Notes",
            "chrome": "Google Chrome",
            "finder": "Finder",
            "slack": "Slack",
            "spotify": "Spotify"
        }
        lower_app_query = app_query.lower()
        app_name = app_aliases.get(lower_app_query, app_query.title())
        try:
            subprocess.call(["open", "-a", app_name])
            return f"Opening {app_name}"
        except Exception as e:
            logging.error(f"Error opening {app_name}: {e}")
            return f"Sorry, I couldn't open {app_name}."

    def process_command(self, command):
        """Determine the command type and generate an appropriate response."""
        lower_cmd = command.lower()

        # Check for capabilities command.
        if any(phrase in lower_cmd for phrase in ["what can you do", "what are your capabilities", "list your functions", "help", "capabilities"]):
            return self.list_capabilities()
        elif any(phrase in lower_cmd for phrase in ["what time is it", "current time", "tell me the time"]):
            current_time = datetime.now().strftime("%I:%M %p")
            return f"The current time is {current_time}."
        elif "weather" in lower_cmd:
            location = self.parse_weather_query(command) or self.home_zip_code
            return self.get_weather(location)
        # Check for Safari-related commands.
        elif lower_cmd.startswith("search for"):
            # e.g., "search for best tacos near me"
            search_term = command[len("search for"):].strip()
            return self.open_in_safari(search_term)
        elif any(phrase in lower_cmd for phrase in ["open safari", "bring up", "go to"]):
            return self.open_in_safari(command)
        # Check for generic app-opening commands.
        elif lower_cmd.startswith("open ") and not lower_cmd.startswith("open safari"):
            return self.open_app(command)
        else:
            return self.chat_with_gpt(command)

    def run(self):
        """Start all threads and process commands from the shared queue."""
        # Start TTS thread
        threading.Thread(target=self.tts_loop, daemon=True).start()

        # Start voice and text input threads
        threading.Thread(target=self.voice_input_thread, daemon=True).start()
        threading.Thread(target=self.text_input_thread, daemon=True).start()

        # Print persistent header at startup
        self.print_header()

        self.speak("Hello, I'm JARVIS. Say 'Hey Jarvis' or type your command.")

        while True:
            command = self.command_queue.get()
            if command.lower() in ["exit", "quit"]:
                self.speak("Goodbye!")
                break

            response = self.process_command(command)
            # Clear screen and reprint header before showing the response
            self.print_header()
            print(f"\nAssistant: {response}\n")
            self.speak(response)


if __name__ == "__main__":
    try:
        assistant = VoiceAssistant()
        assistant.run()
    except Exception as e:
        logging.critical(f"Assistant terminated due to error: {e}")
