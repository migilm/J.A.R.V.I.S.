import openai
import os
import speech_recognition as sr
import pyttsx3
import requests
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

def chat_with_gpt(prompt, api_key, model="gpt-4"):
    """
    Send a prompt to the ChatGPT API and return the response.
    """
    openai.api_key = api_key
    try:
        response = openai.ChatCompletion.create(
            model=model,
            messages=[
                {"role": "system", "content": "You are a helpful AI assistant."},
                {"role": "user", "content": prompt},
            ]
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        return f"An error occurred: {str(e)}"

def get_weather(location, weather_api_key):
    """
    Fetch weather information for a given location.
    """
    url = (f"http://api.openweathermap.org/data/2.5/weather?zip={location},us&appid={weather_api_key}&units=imperial"
           if location.isdigit() else
           f"http://api.openweathermap.org/data/2.5/weather?q={location}&appid={weather_api_key}&units=imperial")
    try:
        response = requests.get(url)
        data = response.json()
        if response.status_code == 200:
            city_name = data.get("name", location)
            weather = data["weather"][0]["description"]
            temperature = data["main"]["temp"]
            return f"The weather in {city_name} is {weather} with a temperature of {temperature}Â°F."
        return f"Could not retrieve weather data for {location}. Please check the location name."
    except Exception as e:
        return f"An error occurred while fetching the weather data: {e}"

def speak(text):
    """Convert text to speech."""
    engine = pyttsx3.init()
    engine.say(text)
    engine.runAndWait()

def listen_for_command():
    """Listen for a wake word and return the command."""
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening for the wake word 'hey Jarvis'...")
        while True:
            try:
                audio = recognizer.listen(source, timeout=30, phrase_time_limit=10)
                command = recognizer.recognize_google(audio).lower()
                if "hey jarvis" in command:
                    query = command.replace("hey jarvis", "").strip()
                    if query:
                        return query
                    speak("Yes Mr. Stark, how can I help?")
                    print("Wake word detected. Listening for your query...")
                    return listen_for_query()
            except (sr.UnknownValueError, sr.RequestError):
                continue

def listen_for_query():
    """Listen for the user's query."""
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        for attempt in range(2):
            try:
                print("Listening for your query...")
                audio = recognizer.listen(source, timeout=10, phrase_time_limit=10)
                return recognizer.recognize_google(audio)
            except sr.UnknownValueError:
                if attempt == 0:
                    speak("I didn't catch that. What can I help with?")
            except sr.RequestError as e:
                return f"Error with the speech recognition service: {e}"
        return "I couldn't understand your query."

def main():
    """Run the AI assistant with voice interaction and weather functionality."""
    home_zip_code = "64037"  # Replace with actual home ZIP code
    api_key = os.getenv("OPENAI_API_KEY")
    weather_api_key = os.getenv("WEATHER_API_KEY")

    if not api_key or not weather_api_key:
        print("Error: API keys are missing. Please set them in the .env file.")
        return

    print("Welcome to the AI Assistant! Say 'hey Jarvis' to get started, or type 'exit' to end the session.")
    
    while True:
        query = listen_for_command()
        if query.lower() in ["exit", "quit"]:
            print("Goodbye!")
            speak("Goodbye!")
            break

        if any(phrase in query.lower() for phrase in ["weather in", "weather at home", "weather in my location"]):
            location = home_zip_code if ("home" in query.lower() or "my location" in query.lower()) else query.split("in")[-1].strip()
            response = get_weather(location, weather_api_key)
        else:
            response = chat_with_gpt(query, api_key)

        print(f"Assistant: {response}\n")
        speak(response)

if __name__ == "__main__":
    main()
